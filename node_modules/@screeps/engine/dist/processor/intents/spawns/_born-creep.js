'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ = require('lodash'),
    utils = require('../../../utils'),
    driver = utils.getDriver(),
    C = driver.constants,
    movement = require('../movement');

module.exports = function (spawn, creep, roomObjects, roomTerrain, bulk, stats, gameTime) {

    var newX, newY, isOccupied, hostileOccupied;
    var checkObstacleFn = function checkObstacleFn(i) {
        return i.x == newX && i.y == newY && (_.contains(C.OBSTACLE_OBJECT_TYPES, i.type) || // just unwalkable
        i.type == 'constructionSite' && _.contains(C.OBSTACLE_OBJECT_TYPES, i.structureType) // unwalkable site
        );
    };

    var directions = [1, 2, 3, 4, 5, 6, 7, 8];
    if (spawn.spawning && spawn.spawning.directions) {
        directions = spawn.spawning.directions;
    }
    var otherDirections = _.difference([1, 2, 3, 4, 5, 6, 7, 8], directions);
    // find the first direction where the creep can spawn
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = directions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var direction = _step.value;

            var _utils$getOffsetsByDi3 = utils.getOffsetsByDirection(direction),
                _utils$getOffsetsByDi4 = _slicedToArray(_utils$getOffsetsByDi3, 2),
                dx = _utils$getOffsetsByDi4[0],
                dy = _utils$getOffsetsByDi4[1];

            newX = spawn.x + dx;
            newY = spawn.y + dy;
            isOccupied = _.any(roomObjects, checkObstacleFn) || utils.checkTerrain(roomTerrain, newX, newY, C.TERRAIN_MASK_WALL) || movement.isTileBusy(newX, newY);

            if (!isOccupied) {
                break;
            }

            // remember the first direction where we found a hostile creep
            if (!hostileOccupied) {
                hostileOccupied = _.find(roomObjects, function (i) {
                    return i.x == newX && i.y == newY && i.type == 'creep' && i.user != spawn.user;
                });
            }
        }

        // if we found a place to spawn, do so
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    if (!isOccupied) {
        bulk.update(creep, {
            x: newX,
            y: newY,
            spawning: false
        });
        return true;
    }

    // spawn is surrounded, spawnstomp the first hostile we found above, unless...
    if (hostileOccupied) {
        // bail if there's an opening we could spawn to but chose not to
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = otherDirections[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var direction = _step2.value;

                var _utils$getOffsetsByDi = utils.getOffsetsByDirection(direction),
                    _utils$getOffsetsByDi2 = _slicedToArray(_utils$getOffsetsByDi, 2),
                    dx = _utils$getOffsetsByDi2[0],
                    dy = _utils$getOffsetsByDi2[1];

                newX = spawn.x + dx;
                newY = spawn.y + dy;
                isOccupied = _.any(roomObjects, checkObstacleFn) || utils.checkTerrain(roomTerrain, newX, newY, C.TERRAIN_MASK_WALL) || movement.isTileBusy(newX, newY);

                if (!isOccupied) {
                    return false;
                }
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }

        require('../creeps/_die')(hostileOccupied, roomObjects, bulk, stats, undefined, gameTime);
        bulk.update(creep, {
            x: hostileOccupied.x,
            y: hostileOccupied.y,
            spawning: false
        });
        return true;
    }

    return false;
};
//# sourceMappingURL=../../../sourcemaps/processor/intents/spawns/_born-creep.js.map
