'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var q = require('q'),
    _ = require('lodash'),
    utils = require('../utils'),
    driver = utils.getDriver(),
    C = driver.constants,
    marketProcessor = require('./market');

module.exports = function () {

    return driver.getInterRoom().then(function (data) {
        if (!data) {
            return;
        }

        var _data = _slicedToArray(data, 5),
            gameTime = _data[0],
            creeps = _data[1],
            accessibleRooms = _data[2],
            terminals = _data[3],
            market = _data[4];

        var bulk = driver.bulkObjectsWrite(),
            bulkRooms = driver.bulkRoomsWrite(),
            activateRooms = {};

        // creeps

        creeps.forEach(function (creep) {
            if (!accessibleRooms[creep.interRoom.room]) {
                return;
            }
            if (!activateRooms[creep.interRoom.room]) {
                bulkRooms.update(creep.interRoom.room, { active: true });
            }
            activateRooms[creep.interRoom.room] = true;

            bulk.update(creep, { room: creep.interRoom.room, x: creep.interRoom.x, y: creep.interRoom.y, interRoom: null });
        });

        return marketProcessor.execute(market, gameTime, terminals, bulk).then(function () {
            return q.all([bulk.execute(), bulkRooms.execute()]);
        });
    });
};
//# sourceMappingURL=../sourcemaps/processor/global.js.map
